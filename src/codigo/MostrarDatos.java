/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codigo;

import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jhony
 */
public class MostrarDatos extends javax.swing.JFrame {

    /**
     * Creates new form MostrarDatos
     */
    private ArrayList<Punto> Puntos;
    private Fichero fichero;
    private DefaultTableModel model;

    public MostrarDatos() {
        initComponents();
        setName("Mostrar Datos");
        this.setLocationRelativeTo(null);
    }

    void setDatos(ArrayList<Punto> listaPuntos) {
        this.Puntos = listaPuntos;
    }

    void setFichero(Fichero ficheroActual) {
        this.fichero = ficheroActual;
        // nombreFichero.setText("Fichero: " + fichero.getNombre());

        //dimension.setText(String.valueOf("Tamaño: " + fichero.getDimension()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 647, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 252, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MostrarDatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MostrarDatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MostrarDatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MostrarDatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MostrarDatos().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public void comprobarEstrategias() {
        model = new DefaultTableModel();
        this.setTitle("Fichero: " + fichero.getNombre());
        //  Diseñamos tabla de comprobaciones
        JTable comprobarTabla = new JTable(model);
        model.addColumn("Estrategia");
        model.addColumn("Punto 1");
        model.addColumn("Punto 2");
        model.addColumn("Distancia");
        model.addColumn("Comparaciones");
        model.addColumn("Tiempo (mseg)");
        model.addRow(new Object[]{"Exhaustivo"});
        model.addRow(new Object[]{"Exhaustivo Poda"});
        model.addRow(new Object[]{"DyV"});
        model.addRow(new Object[]{"DyV Mejorado"});
        // Insertamos Exhaustivo
        Algoritmos alg = new Algoritmos();
        ArrayList<Punto> tmp = alg.Exhaustivo(Puntos);
        String distanciaFormateada = String.format("%.8f", tmp.get(0).getDistancia(tmp.get(1)));
        model.setValueAt(tmp.get(0).getId() + "(" + tmp.get(0).getCoordenadas() + ")", 0, 1);
        model.setValueAt(tmp.get(1).getId() + "(" + tmp.get(1).getCoordenadas() + ")", 0, 2);
        model.setValueAt(distanciaFormateada, 0, 3);
        model.setValueAt(tmp.get(0).getComparaciones(), 0, 4);
        model.setValueAt(alg.c.getTime(), 0, 5);

        //  Insertamos Exhaustivo Poda
        tmp.clear();
        tmp = alg.ExhaustivoPoda(Puntos);
        distanciaFormateada = String.format("%.8f", tmp.get(0).getDistancia(tmp.get(1)));
        model.setValueAt(tmp.get(0).getId() + "(" + tmp.get(0).getCoordenadas() + ")", 1, 1);
        model.setValueAt(tmp.get(1).getId() + "(" + tmp.get(1).getCoordenadas() + ")", 1, 2);
        model.setValueAt(distanciaFormateada, 1, 3);
        model.setValueAt(tmp.get(0).getComparaciones(), 1, 4);
        model.setValueAt(alg.c.getTime(), 1, 5);

        //  Insertamos Divide y Venceras 
        try {
            tmp.clear();
            tmp = alg.DYV(Puntos);
            distanciaFormateada = String.format("%.8f", tmp.get(0).getDistancia(tmp.get(1)));

            model.setValueAt(tmp.get(0).getId() + "(" + tmp.get(0).getCoordenadas() + ")", 2, 1);
            model.setValueAt(tmp.get(1).getId() + "(" + tmp.get(1).getCoordenadas() + ")", 2, 2);
            model.setValueAt(distanciaFormateada, 2, 3);
            model.setValueAt(alg.getComparacionesDV(), 2, 4);
            model.setValueAt(alg.c.getTime(), 2, 5);
        } catch (Exception ex) {
            Logger.getLogger(MostrarDatos.class.getName()).log(Level.SEVERE, null, ex);
        }

        //  Insertamos Divide y Venceras Mejorado
        try {
            tmp.clear();
            tmp = alg.DYVMejorado(Puntos);
            distanciaFormateada = String.format("%.8f", tmp.get(0).getDistancia(tmp.get(1)));

            model.setValueAt(tmp.get(0).getId() + "(" + tmp.get(0).getCoordenadas() + ")", 3, 1);
            model.setValueAt(tmp.get(1).getId() + "(" + tmp.get(1).getCoordenadas() + ")", 3, 2);
            model.setValueAt(distanciaFormateada, 3, 3);
            model.setValueAt(alg.getComparacionesDV(), 3, 4);
            model.setValueAt(alg.c.getTime(), 3, 5);
        } catch (Exception ex) {
            Logger.getLogger(MostrarDatos.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Agregar la JTable a tu JFrame
        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(new JScrollPane(comprobarTabla), BorderLayout.CENTER);
        this.setSize(1500, 150);

    }

    public void comparaEstrategias(boolean mismaX) {
        // Crear una nueva JTable mediante código
        model = new DefaultTableModel();
        JTable tablaDatos = new JTable(model);
        tablaDatos.repaint();
        int talla = 0, tam = 10;
        this.setTitle("Comparar Estrategias");
        Punto aux = new Punto();
        Algoritmos alg = new Algoritmos();
        ArrayList<ArrayList<Punto>> soluciones = new ArrayList<>();
        ArrayList<Punto> tmp, aux1, aux2;
        for (int i = 0; i < tam; i++) {
            talla = (i + 1) * 500;
            try {
                tmp = aux.generaPuntos(talla, mismaX);
                aux1 = tmp;
                aux2 = tmp;
                soluciones.add(alg.Exhaustivo(tmp));
                soluciones.add(alg.ExhaustivoPoda(tmp));
                //soluciones.get(soluciones.size()-1).get(0).set
                soluciones.add(alg.DYV(aux1));
                // asignamos tiempo 
                soluciones.get(soluciones.size() - 1).get(0).setTiempoSolucion(String.format("%6f", alg.c.getTime()));
                soluciones.get(soluciones.size() - 1).get(0).setComparaciones(alg.getComparacionesDV());
                soluciones.add(alg.DYVMejorado(aux2));
                soluciones.get(soluciones.size() - 1).get(0).setTiempoSolucion(String.format("%6f", alg.c.getTime()));
                soluciones.get(soluciones.size() - 1).get(0).setComparaciones(alg.getComparacionesDV());
            } catch (Exception ex) {
                Logger.getLogger(MostrarDatos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        model.addColumn("Talla");
        model.addColumn("Exhaustivo (mseg)");
        model.addColumn("Exhaustivo Poda (mseg)");
        model.addColumn("DyV (mseg)");
        model.addColumn("DyV Mejorado (mseg)");

        for (int i = 0; i < tam; i++) {
            model.addRow(new Object[]{500 * (i + 1)});
        }

        int fila = 0;
        int columnaInicio = 1; // La primera columna donde comenzar a insertar los valores

        for (int i = 0; i < tam; i++) { // Iterar sobre las filas
            for (int j = 0; j < 4; j++) { // Iterar sobre las columnas
                model.setValueAt(soluciones.get(i * 4 + j).get(0).getTiempoSolucion(), fila, columnaInicio + j);
            }
            fila++;
        }
        // Agregar la JTable a tu JFrame
        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(new JScrollPane(tablaDatos), BorderLayout.CENTER);
        this.setSize(1600, tablaDatos.getRowHeight() * (tam + 5));
    }

    public void compara2(String opc1, String opc2, boolean mismaX) {
        model = new DefaultTableModel();
        JTable tablaDatos = new JTable(model);
        int talla = 0, tam = 10;
        this.setTitle("Comparar Estrategias");
        Punto aux = new Punto();
        
        ArrayList<ArrayList<Punto>> soluciones1 = new ArrayList<>(),soluciones2 = new ArrayList<>();
        ArrayList<Punto> tmp;
        for (int i = 0; i < tam; i++) {
            talla = (i + 1) * 500;
            try {
                tmp = aux.generaPuntos(talla, mismaX);
                soluciones1.add(procesar(opc1,tmp));
                soluciones2.add(procesar(opc2,tmp));
                

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error al comparar 2 Estrategias");
            }
        }
        model.addColumn("Talla");
        model.addColumn(opc1 + " (mseg)");
        model.addColumn(opc1 + " (Distancia)");
        model.addColumn(opc2 + " (mseg)");
        model.addColumn(opc2 + " (Distancia)");

        for (int i = 0; i < tam; i++) {
            model.addRow(new Object[]{500 * (i + 1)});
        }
        for (int i = 0; i < tam; i++) {
            model.setValueAt(soluciones1.get(i).get(0).getTiempoSolucion(), i, 1);
            model.setValueAt(String.format("%6f", soluciones1.get(i).get(0).getDistancia(soluciones1.get(i).get(1))), i, 2);
             model.setValueAt(soluciones2.get(i).get(0).getTiempoSolucion(), i, 3);
            model.setValueAt(String.format("%6f", soluciones2.get(i).get(0).getDistancia(soluciones2.get(i).get(1))), i, 4);
        }
        // Agregar la JTable a tu JFrame
        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(new JScrollPane(tablaDatos), BorderLayout.CENTER);
        this.setSize(1600, tablaDatos.getRowHeight() * (tam + 5));
    }

    public ArrayList<Punto>  procesar(String opc, ArrayList<Punto> tmp) throws Exception {
        Algoritmos alg = new Algoritmos();
        ArrayList<Punto> aux = new ArrayList<>();
        switch(opc){
            case "Exhaustivo":
                aux = (alg.Exhaustivo(tmp));
                break;
            case "Exhaustivo Poda":
                aux = (alg.ExhaustivoPoda(tmp));
                break;
            case "DyV":
                aux = (alg.DYV(tmp));
                aux.get(0).setTiempoSolucion(String.format("%6f", alg.c.getTime()));
                break;
            case "DyV Mejorado":
                aux = (alg.DYVMejorado(tmp));
                aux.get(0).setTiempoSolucion(String.format("%6f", alg.c.getTime()));
                break;
            default:
                break;
        }
        
        
        return aux;
    }

}
